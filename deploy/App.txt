<!DOCTYPE html>
<html>
<head>
    <title>Story Rollup Custom List</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Fri Aug 05 2016 12:14:19 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Aug 05 2016 12:14:19 GMT-0600 (MDT)";
        var BUILDER = "kcorkan";
        var CHECKSUM = 12682067921;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CArABU.technicalservices.chunk.Store',{

    MAX_CHUNK_SIZE: 25,
    logger: new Rally.technicalservices.Logger(),

    constructor: function(config) {
        this.chunkProperty = config.chunkProperty;
        this.chunkValue = config.chunkValue;

        this.storeConfig = config.storeConfig || {};
        this.storeType = config.storeType || 'Rally.data.wsapi.Store';

    },
    load: function(){
        var deferred = Ext.create('Deft.Deferred');

        var promises = [],
            chunkArray = this.chunkValue,
            config = this.storeConfig;

        for (var i=0; i < chunkArray.length; i = i+this.MAX_CHUNK_SIZE){
            var chunk = Ext.Array.slice(chunkArray, i, i + this.MAX_CHUNK_SIZE);
            promises.push(this._fetchChunk(chunk, config));
        }

        Deft.Promise.all(promises).then({
            success: function(results){
                var records = _.flatten(results);
                this.logger.log('load SUCCESS results', results,records);
                deferred.resolve(records);
            },
            failure: function(msg){
                this.logger.log('load FAILURE', chunkArray, msg);
                deferred.reject(msg);
            },
            scope: this
        });


        return deferred;
    },

    _fetchChunk: function(objectIDs, config){
        this.logger.log('chunk.Store._fetchChunk',objectIDs, config);
        var deferred = Ext.create('Deft.Deferred');

        var chunkProperty = this.chunkProperty,
            filters = _.map(objectIDs, function(o){ return {
                property: chunkProperty,
                value: o
            }
        });
        filters = Rally.data.wsapi.Filter.or(filters);


        if (config.filters){
            if (Ext.isArray(config.filters)){
                config.filters  = Rally.data.wsapi.Filter.and(config.filters);
            }
            filters = filters.and(config.filters);
        }
        this.logger.log('chunk.Store._fetchChunk',filters.toString());

        var fetch = config.fetch || true,
            model = config.model || 'HierarchicalRequirement';

        Ext.create(this.storeType,{
            fetch: fetch,
            filters: filters,
            model: model
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    var msg = "Failure loading records for objectIDs: " + objectIDs.join(', ') + ":  " + operation.error.errors.join(',');
                    deferred.resolve(msg);
                }
            }
        });
        return deferred;
    }

});
Ext.override(Rally.data.wsapi.TreeStore,{
    _decorateModels: function() {
        var models = this.model;

        if (_.isFunction(models.getArtifactComponentModels)) {
            models = models.getArtifactComponentModels();
        }

        Ext.Array.each(models, function(m){
            if (m.typePath === "hierarchicalrequirement"){
                m.addField({name: 'PercentDoneByStoryCount', type: 'auto', defaultValue: null});
                m.addField({name: 'PercentDoneByStoryPlanEstimate', type: 'auto', defaultValue: null});
            }
            m.addField({name: 'Teams', type: 'auto', defaultValue: null});
        });

        _.each(Ext.Array.from(models), Rally.ui.grid.data.NodeInterface.decorate, Rally.ui.grid.data.NodeInterface);
    }
});

Ext.override(Rally.ui.grid.TreeGrid, {
    _mergeColumnConfigs: function(newColumns, oldColumns) {

        var mergedColumns= _.map(newColumns, function(newColumn) {
            var oldColumn = _.find(oldColumns, {dataIndex: this._getColumnName(newColumn)});
            if (oldColumn) {
                return this._getColumnConfigFromColumn(oldColumn);
            }

            return newColumn;
        }, this);
        mergedColumns = mergedColumns.concat(this.config.derivedColumns);
        return mergedColumns;
    },
    _getColumnConfigsBasedOnCurrentOrder: function(columnConfigs) {
        var cols = _(this.headerCt.items.getRange()).map(function(column) {
            //override:  Added additional search for column.text
            return _.contains(columnConfigs, column.dataIndex) ? column.dataIndex : _.find(columnConfigs, {xtype: column.xtype, text: column.text });
        }).compact().value();

        return cols;
    },
    _restoreColumnOrder: function(columnConfigs) {

        var currentColumns = this._getColumnConfigsBasedOnCurrentOrder(columnConfigs);
        var addedColumns = _.filter(columnConfigs, function(config) {
            return !_.find(currentColumns, {dataIndex: config.dataIndex}) || Ext.isString(config);
        });
        return currentColumns.concat(addedColumns);
    },
    _applyStatefulColumns: function(columns) {
        if (this.alwaysShowDefaultColumns) {
            _.each(this.columnCfgs, function(columnCfg) {
                if (!_.any(columns, {dataIndex: this._getColumnName(columnCfg)})) {
                    columns.push(columnCfg);
                }
            }, this);
        }

        if (this.config && this.config.derivedColumns){
            this.columnCfgs = columns.concat(this.config.derivedColumns);
        } else {
            this.columnCfgs = columns;
        }

    }
});

Ext.define('CArABU.technicalservices.TeamsTemplateColumn', {
    extend: 'Ext.grid.column.Template',
    alias: ['widget.teamstemplatecolumn'],

    align: 'right',

    initComponent: function(){
        var me = this;

        Ext.QuickTips.init();

        me.tpl = new Ext.XTemplate('<tpl><div data-qtip="{[this.getTooltip(values)]}" style="cursor:pointer;text-align:right;">{[this.getTeamsText(values)]}</div></tpl>',{
            getTeamsText: function(values){
                if (values && values.Teams){
                    if (Ext.isArray(values.Teams)){
                        var teams = Ext.Array.unique(values.Teams);
                        return teams.length;
                    }
                }
                return '--';
            },
            getTooltip: function(values){

                if (values && values.Teams && Ext.isArray(values.Teams)){
                    var hash = {};
                    Ext.Array.each(values.Teams, function(t){
                        if (!hash[t]){
                            hash[t] = 0;
                        }
                        hash[t]++;
                    });
                    var tooltip = "";
                    Ext.Object.each(hash, function(team, num){
                        tooltip += Ext.String.format("{0} ({1} leaf stories)<br/>", team, num);
                    });
                    return tooltip;

                }
                return "";

            }

        });
        me.hasCustomRenderer = true;
        me.callParent(arguments);
    },
    defaultRenderer: function(value, meta, record) {
        var data = Ext.apply({}, record.getData()); //, record.getAssociatedData());
        return this.tpl.apply(data);
    }
});

Ext.define("story-rollup-custom-list", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'selector_box'},
        {xtype:'container',itemId:'grid_box'}
    ],

    integrationHeaders : {
        name : "story-rollup-custom-list"
    },

    config: {
        defaultSettings: {
            query: ""
        }
    },

    acceptedScheduleStates: ['Accepted'],

    launch: function() {
        this.initializeCompletedScheduleStates("Accepted").then({
            success: this.initializeApp,
            failure: this.showErrorNotification,
            scope: this
        });
       
    },
    initializeCompletedScheduleStates: function(firstCompletedState){
        var deferred = Ext.create('Deft.Deferred');

        Rally.data.ModelFactory.getModel({
            type: 'UserStory',
            success: function(model) {
                model.getField('ScheduleState').getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        if (success){
                            var scheduleStates = [];
                            Ext.Array.each(records, function(allowedValue) {
                                //each record is an instance of the AllowedAttributeValue model
                                scheduleStates.push(allowedValue.get('StringValue'));
                            });
                            var completedIndex = _.indexOf(scheduleStates,firstCompletedState);
                            deferred.resolve(Ext.Array.slice(scheduleStates,completedIndex))
                        } else {
                            var msg = "Error fetching Schedule State values:  " + operation && operation.error && operation.error.errors.join(",");
                            deferred.reject(msg);
                        }

                    }
                });
            }
        });

        return deferred;
    },
    initializeApp: function(completedScheduleStates){
        this.acceptedScheduleStates = completedScheduleStates;
        this.logger.log('initializeApp', completedScheduleStates);

        this.getSelectorBox().removeAll();

        var cb = this.getSelectorBox().add({
            xtype: 'rallyportfolioitemtypecombobox',
            fieldLabel: "Type"
        });
        cb.on('select', this.updateView, this);
    },
    getSelectorBox: function(){
        return this.down('#selector_box');
    },
    getGridBox: function() {
        return this.down('#grid_box');
    },
    getInitialFilters: function(){
        var query = this.getSetting('query');
        if (query && query.length > 0){
            var filters = Rally.data.wsapi.Filter.fromQueryString(query);
            return filters;
        }
        return [];
    },
    updateView: function(piSelector){
        var piType = piSelector.getRecord() && piSelector.getRecord().get('TypePath');
        this.logger.log('updateView', piType);

        this.getGridBox().removeAll();

        if (!piType){
            return;
        }

        this.modelNames = [piType];
        Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
            models: this.modelNames,
            enableHierarchy: true,
            filters: this.getInitialFilters()
        }).then({
            success: this.buildGridBoard,
            scope: this
        });

    },
    updateAssociatedData: function(store, node, records, success){
        this.logger.log('updateAssociatedData', store, node, records, success);
        var updateableRecords = [],
            featureOids = [];

        Ext.Array.each(records, function(r){
            if (r.get('PortfolioItem')){
                updateableRecords.push(r);
                if (!Ext.Array.contains(featureOids,r.get('PortfolioItem').ObjectID )){
                    featureOids.push(r.get('PortfolioItem').ObjectID);
                }
            }
        });
        this.logger.log('updateAssociatedData', updateableRecords, featureOids);

        if (updateableRecords.length > 0){
            Ext.create('CArABU.technicalservices.chunk.Store',{
                storeConfig: {
                    model: 'HierarchicalRequirement',
                    fetch: ['PlanEstimate','ScheduleState','PortfolioItem','Parent','ObjectID','Project','Name'],
                    filters: {
                        property: 'Parent.ObjectID',
                        operator: '>',
                        value: 0
                    }
                },
                chunkProperty: 'Feature.ObjectID',
                chunkValue: featureOids,
            }).load().then({
                success: function(children){
                    this.processChildren(updateableRecords, children);
                },
                failure: this.showErrorNotification,
                scope: this
            });
        }

    },
    processChildren: function(topLevelStoryRecords, childRecords){
        this.logger.log('processChildren', childRecords)
        if (!childRecords || childRecords.length == 0){
            return;
        }

        var childHash = {},
            acceptedScheduleStates = this.acceptedScheduleStates;
        for (var i=0; i<childRecords.length; i++){
            var child = childRecords[i].getData(),
                parent = (child.PortfolioItem && child.PortfolioItem.ObjectID) ||
                            (child.Parent && child.Parent.ObjectID) || null;

            if (parent){
                if (!childHash[parent]){
                    childHash[parent] = [];
                }
                childHash[parent].push(child);
            }
        }

        this.logger.log('processChildren', childHash, topLevelStoryRecords);

        for (var i=0; i< topLevelStoryRecords.length; i++){
            var epic = topLevelStoryRecords[i],
                totals = this.getChildTotals(epic.get('ObjectID'), childHash, acceptedScheduleStates);

            var percentDoneByStoryCount = totals.totalCount > 0 ? totals.totalAcceptedCount/totals.totalCount : null,
                percentDoneByPlanEstimate = totals.totalPlanEstimate > 0 ? totals.totalAcceptedPlanEstimate/totals.totalPlanEstimate : null;

            this.logger.log('percent', percentDoneByPlanEstimate,percentDoneByStoryCount,totals.projects);

            epic.set('PercentDoneByStoryCount',percentDoneByStoryCount);
            epic.set('PercentDoneByStoryPlanEstimate',percentDoneByPlanEstimate);
            epic.set('Teams', totals.projects);
        }

    },
    getChildTotals: function(oid, childHash, acceptedScheduleStates){
        this.logger.log('getChildTotals', oid, childHash, acceptedScheduleStates);
        var children = childHash[oid] || [],
            totalPlanEstimate = 0,
            totalAcceptedPlanEstimate = 0,
            totalCount = 0,
            totalAcceptedCount = 0,
            projects = [];

        Ext.Array.each(children, function(c){
            var totals = {};

            if (childHash[c.ObjectID]){
                totals = this.getChildTotals(c.ObjectID, childHash, acceptedScheduleStates);
            } else {
                var isAccepted = Ext.Array.contains(acceptedScheduleStates, c.ScheduleState),
                    acceptedPlanEstimate = isAccepted && c.PlanEstimate || 0,
                    acceptedTotal = isAccepted && 1 || 0;
                totals = {
                    totalPlanEstimate: c.PlanEstimate,
                    totalAcceptedPlanEstimate: acceptedPlanEstimate,
                    totalCount: 1,
                    totalAcceptedCount: acceptedTotal,
                    projects: [c.Project && c.Project.Name]
                };
            }
            totalPlanEstimate += totals.totalPlanEstimate;
            totalAcceptedPlanEstimate += totals.totalAcceptedPlanEstimate;
            totalCount += totals.totalCount;
            totalAcceptedCount += totals.totalAcceptedCount;
            projects = projects.concat(totals.projects);

        }, this);
        return {
            totalPlanEstimate: totalPlanEstimate,
            totalAcceptedPlanEstimate: totalAcceptedPlanEstimate,
            totalCount: totalCount,
            totalAcceptedCount: totalAcceptedCount,
            projects: projects
        };
    },
    showErrorNotification: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg});
    },
    buildGridBoard: function(store){
        var modelNames = this.modelNames,
            context = this.getContext();

        store.on('load', this.updateAssociatedData, this);
        this.add({
            xtype: 'rallygridboard',
            context: context,
            modelNames: modelNames,
            toggleState: 'grid',
            stateful: false,
            stateId: 'fred2',
            plugins: [
                'rallygridboardaddnew',
                {
                    ptype: 'rallygridboardfieldpicker',
                    headerPosition: 'left',
                    modelNames: modelNames,
                    stateful: true,
                    stateId: context.getScopedStateId('columns4')
                },{
                    ptype: 'rallygridboardinlinefiltercontrol',
                    inlineFilterButtonConfig: {
                        stateful: true,
                        stateId: context.getScopedStateId('filters'),
                        modelNames: modelNames,
                        inlineFilterPanelConfig: {
                            quickFilterPanelConfig: {
                                defaultFields: [
                                    'ArtifactSearch',
                                    'Owner',
                                    'ModelType'
                                ]
                            }
                        }
                    }
                }, {
                    ptype: 'rallygridboardactionsmenu',
                    menuItems: [
                        {
                            text: 'Export...',
                            handler: function() {
                                window.location = Rally.ui.gridboard.Export.buildCsvExportUrl(
                                    this.down('rallygridboard').getGridOrBoard());
                            },
                            scope: this
                        }
                    ],
                    buttonConfig: {
                        iconCls: 'icon-export'
                    }
                }
            ],
            gridConfig: {
                store: store,
                columnCfgs: this.getDefaultColumns(),
                derivedColumns: this.getAdditionalColumns()
            },
            height: this.getHeight()
        });
    },
    getDefaultColumns: function(){
        var cols = [
            'Name',
            'PercentDoneByStoryPlanEstimate',
            'PercentDoneByStoryCount',
            'State',
            'Owner'
        ].concat(this.getAdditionalColumns());
        this.logger.log('getDefaultColumns', cols);
        return cols;
    },
    getAdditionalColumns: function(){
        return [{
            xtype: 'teamstemplatecolumn',
            text: 'Teams'
        }];
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('story-rollup-custom-list', {
                   name: 'Story Rollup Custom List'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>