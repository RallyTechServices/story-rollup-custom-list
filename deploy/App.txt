<!DOCTYPE html>
<html>
<head>
    <title>Story Rollup Custom List</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Sat Aug 27 2016 16:48:31 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sat Aug 27 2016 16:48:31 GMT-0600 (MDT)";
        var BUILDER = "kcorkan";
        var CHECKSUM = 47629279345;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CArABU.technicalservices.chunk.Store',{

    MAX_CHUNK_SIZE: 50,
    logger: new Rally.technicalservices.Logger(),

    constructor: function(config) {
        this.chunkProperty = config.chunkProperty;
        this.chunkValue = config.chunkValue;

        this.storeConfig = config.storeConfig || {};
        this.storeType = config.storeType || 'Rally.data.wsapi.Store';

    },
    load: function(){
        var deferred = Ext.create('Deft.Deferred');

        var promises = [],
            chunkArray = this.chunkValue,
            config = this.storeConfig;

        for (var i=0; i < chunkArray.length; i = i+this.MAX_CHUNK_SIZE){
            var chunk = Ext.Array.slice(chunkArray, i, i + this.MAX_CHUNK_SIZE);
            promises.push(this._fetchChunk(chunk, config));
        }

        Deft.Promise.all(promises).then({
            success: function(results){
                var records = _.flatten(results);
                this.logger.log('load SUCCESS results', results,records);
                deferred.resolve(records);
            },
            failure: function(msg){
                this.logger.log('load FAILURE', chunkArray, msg);
                deferred.reject(msg);
            },
            scope: this
        });


        return deferred;
    },

    _fetchChunk: function(objectIDs, config){
        this.logger.log('chunk.Store._fetchChunk',objectIDs, config);
        var deferred = Ext.create('Deft.Deferred');

        var chunkProperty = this.chunkProperty,
            filters = _.map(objectIDs, function(o){ return {
                property: chunkProperty,
                value: o
            }
        });
        filters = Rally.data.wsapi.Filter.or(filters);


        if (config.filters){
            if (Ext.isArray(config.filters)){
                config.filters  = Rally.data.wsapi.Filter.and(config.filters);
            }
            filters = filters.and(config.filters);
        }
        this.logger.log('chunk.Store._fetchChunk',filters.toString());

        var fetch = config.fetch || true,
            model = config.model || 'HierarchicalRequirement';

        Ext.create(this.storeType,{
            fetch: fetch,
            filters: filters,
            model: model,
            context: {project: null}
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    var msg = "Failure loading records for objectIDs: " + objectIDs.join(', ') + ":  " + operation.error.errors.join(',');
                    deferred.resolve(msg);
                }
            }
        });
        return deferred;
    }

});
Ext.override(Rally.data.wsapi.TreeStore,{
    _decorateModels: function() {
        var models = this.model;

        if (_.isFunction(models.getArtifactComponentModels)) {
            models = models.getArtifactComponentModels();
        }

        Ext.Array.each(models, function(m){
            if (m.typePath === "hierarchicalrequirement"){
                m.addField({name: 'PercentDoneByStoryCount', type: 'auto', defaultValue: null, modelType: 'hierarchicalrequirement'});
                m.addField({name: 'PercentDoneByStoryPlanEstimate', type: 'auto', defaultValue: null, modelType: 'hierarchicalrequirement'});
            }
            m.addField({name: 'Teams', type: 'auto', defaultValue: null});
        });

        _.each(Ext.Array.from(models), Rally.ui.grid.data.NodeInterface.decorate, Rally.ui.grid.data.NodeInterface);
    }
});

Ext.override(Rally.ui.grid.TreeGrid, {
    _mergeColumnConfigs: function(newColumns, oldColumns) {

        var mergedColumns= _.map(newColumns, function(newColumn) {
            var oldColumn = _.find(oldColumns, {dataIndex: this._getColumnName(newColumn)});
            if (oldColumn) {
                return this._getColumnConfigFromColumn(oldColumn);
            }

            return newColumn;
        }, this);
        mergedColumns = mergedColumns.concat(this.config.derivedColumns);
        return mergedColumns;
    },
    _getColumnConfigsBasedOnCurrentOrder: function(columnConfigs) {
        var cols = _(this.headerCt.items.getRange()).map(function(column) {
            //override:  Added additional search for column.text
            return _.contains(columnConfigs, column.dataIndex) ? column.dataIndex : _.find(columnConfigs, {xtype: column.xtype, text: column.text });
        }).compact().value();

        return cols;
    },
    _restoreColumnOrder: function(columnConfigs) {

        var currentColumns = this._getColumnConfigsBasedOnCurrentOrder(columnConfigs);
        var addedColumns = _.filter(columnConfigs, function(config) {
            return !_.find(currentColumns, {dataIndex: config.dataIndex}) || Ext.isString(config);
        });
        return currentColumns.concat(addedColumns);
    },
    _applyStatefulColumns: function(columns) {
        if (this.alwaysShowDefaultColumns) {
            _.each(this.columnCfgs, function(columnCfg) {
                if (!_.any(columns, {dataIndex: this._getColumnName(columnCfg)})) {
                    columns.push(columnCfg);
                }
            }, this);
        }

        if (this.config && this.config.derivedColumns){
            this.columnCfgs = columns.concat(this.config.derivedColumns);
        } else {
            this.columnCfgs = columns;
        }

    }
});

Ext.override(Rally.ui.renderer.RendererFactory, {

    typeFieldTemplates: {
        defectsuite: {
            state: function(field) {
                return Ext.create('Rally.ui.renderer.template.DefectSuiteStateTemplate', {
                    field: field
                });
            }
        },
        milestone: {
            formattedid: function(field) {
                return Ext.create('Rally.ui.renderer.template.FormattedIDTemplate');
            }
        },
        task: {
            state: function(field) {
                return Ext.create('Rally.ui.renderer.template.ScheduleStateTemplate', {
                    field: field,
                    showTrigger: true
                });
            }
        },
        testcase: {
            lastbuild: function(field) {
                return Ext.create('Rally.ui.renderer.template.LastBuildTemplate');
            }
        },
        recyclebinentry: {
            type: function(field) {
                return Ext.create('Rally.ui.renderer.template.TypeDefNameTemplate', {
                    fieldName: field.name
                });
            }
        },
        hierarchicalrequirement: {
            percentdonebystorycount: function(field){
                return Ext.create('Rally.ui.renderer.template.progressbar.StoryPercentDoneByStoryCountTemplate');
            },
            percentdonebystoryplanestimate: function(field){
                return Ext.create('Rally.ui.renderer.template.progressbar.StoryPercentDoneByStoryPlanEstimateTemplate');
            }
        }
    }

});

Ext.override(Rally.data.wsapi.TreeStore, {
    _getChildNodeFilters: function(node) {
        var parentType = node.self.typePath,
            childTypes = this._getChildTypePaths([parentType]),
            parentFieldNames = this._getParentFieldNames(childTypes, parentType);
        //console.log('_getChildNodeFilters', node, this.childFilters, parentType);
        if (parentFieldNames.length) {
            var filters =  Rally.data.wsapi.Filter.or(_.map(parentFieldNames, function(parentFieldName) {
                return {
                    property: parentFieldName,
                    operator: '=',
                    value: node.get('_ref')
                };
            }));
            if (this.childFilters && this.childFilters[parentType]){
                return [filters.and(this.childFilters[parentType])];
            }
            return [filters];
        }
        return [];
    }
});

Ext.override(Rally.ui.grid.plugin.TreeGridChildPager, {
    _storeHasMoreChildPages: function(parentRecord) {
        var loadedCount = this._getLoadedCount(parentRecord);
        var childPageSize = this.cmp.getStore().getChildPageSize(parentRecord);
        return parentRecord.get('leafCount') > loadedCount && loadedCount >= childPageSize;
    }
});

Ext.override(Rally.ui.grid.TreeView, {
    _expandHandler: function(node, children){
        if (this.getTreeStore().getRootNode() !== node && children.length === 0){
            this.refresh(); //treegrid freaks out when it tries to expand a node that has no children, so force a refresh
            if (!this.getTreeStore().hasErrors()){
                Rally.ui.notify.Notifier.showWarning({message:node.get('FormattedID') + ' may have children that are not displayed due to the Feature Query Filter in the App Settings.'});
            }
        }
    },
});
Ext.define('Rally.ui.renderer.template.progressbar.StoryPercentDoneTemplate', {
    requires: [
        'Rally.util.HealthColorCalculator'
    ],
    extend: 'Rally.ui.renderer.template.progressbar.ProgressBarTemplate',

    config: {
        /**
         * @cfg {String}
         * define a height if necessary to fit where it's being used
         */
        height:'15px',

        calculateColorFn: function(recordData) {
            var today = new Date();
            var config = {
                percentComplete: recordData[this.percentDoneName],
                startDate: recordData[this.startDateField] || today,
                endDate: recordData[this.endDateField] || today,
                asOfDate: today
            };

            config.inProgress = config.percentComplete > 0;
            return Rally.util.HealthColorCalculator.calculateHealthColor(config).hex;
        },

        isClickable: true,
        /**
         * @cfg {Boolean}
         * If the percent done is 0%, do not show the bar at all
         */
        showOnlyIfInProgress: false

    },

    constructor: function(config) {
        this.initConfig(config);
        return this.callParent(arguments);
    }
});

/**
 * The Ext.XTemplate used to render the percent done component and column in the grid.
 */
Ext.define('Rally.ui.renderer.template.progressbar.StoryPercentDoneByStoryPlanEstimateTemplate', {
    requires: [],
    extend: 'Rally.ui.renderer.template.progressbar.StoryPercentDoneTemplate',

    config: {
        /**
         * @cfg {String}
         * sometimes it's necessary to name the variable used as the percent done replacement in the template,
         * like in a grid when a record is used to render the template.
         */
        percentDoneName: 'PercentDoneByStoryPlanEstimate',

        /**
         * @cfg {Function}
         * A function that should return true to show a triangle in the top right to denote something is missing.
         * Defaults to:
         *      function(){ return false; }
         */
        showDangerNotificationFn: function (recordData) {
            var summary = recordData._summary || {};

            return !summary.endDate || !summary.startDate ||
                summary.unestimatedLeafStories > 0;
        }
    }
});

Ext.define('Rally.ui.renderer.template.progressbar.StoryPercentDoneByStoryCountTemplate', {
    requires: [],
    extend: 'Rally.ui.renderer.template.progressbar.StoryPercentDoneTemplate',

    config: {

        /**
         * @cfg {String}
         * sometimes it's necessary to name the variable used as the percent done replacement in the template,
         * like in a grid when a record is used to render the template.
         */
        percentDoneName: 'PercentDoneByStoryCount',
        /**
         * @cfg {Function}
         * A function that should return true to show a triangle in the top right to denote something is missing.
         * Defaults to:
         *      function(){ return false; }
         */
        showDangerNotificationFn: function (recordData) {
            var summary = recordData._summary || {};
            return !summary.endDate || !summary.startDate;
        }
    }
});

Ext.override(Rally.ui.popover.PercentDonePopover, {


        constructor: function(config) {
            //percentDoneData: {
            //    PercentDoneByStoryPlanEstimate: 0,
            //    PercentDoneByStoryCount: 0,
            //    ActualEndDate: undefined,
            //    PlannedStartDate: undefined,
            //    PlannedEndDate: undefined,
            //    AcceptedLeafStoryPlanEstimateTotal: 0,
            //    LeafStoryPlanEstimateTotal: 0,
            //    AcceptedLeafStoryCount: 0,
            //    LeafStoryCount: 0,
            //    UnEstimatedLeafStoryCount: 0,
            //    Notes: undefined,
            //    PortfolioItemTypeOrdinal: undefined,
            //    LateChildCount: 0
            //},

            if (config.percentDoneData._type === 'hierarchicalrequirement'){
                var summaryData = config.percentDoneData._summary;

                var plannedEndDate = new Date(),
                    plannedStartDate = new Date();
                if (config.percentDoneData.PortfolioItem){
                    plannedEndDate = summaryData.endDate;
                    plannedStartDate = summaryData.startDate;
                 }

                config.percentDoneData.AcceptedLeafStoryCount = summaryData.totalAcceptedCount;
                config.percentDoneData.AcceptedLeafStoryPlanEstimateTotal = summaryData.totalAcceptedPlanEstimate;
                config.percentDoneData.LeafStoryCount = summaryData.totalCount;
                config.percentDoneData.LeafStoryPlanEstimateTotal = summaryData.totalPlanEstimate;
                config.percentDoneData.ActualEndDate = config.percentDoneData.AcceptedDate;
                config.percentDoneData.PlannedEndDate = plannedEndDate;
                config.percentDoneData.ActualStartDate = config.percentDoneData.InProgressDate;
                config.percentDoneData.PlannedStartDate = plannedStartDate;
                config.percentDoneData.LateChildCount = 0;
                config.percentDoneData.UnEstimatedLeafStoryCount = summaryData.unestimatedLeafStories;
            }

            this.id += Ext.Date.now().toString();
            if (!Ext.getElementById(this.id)) {
                this.initConfig(config);
                config.items = {
                    itemId: 'percentDonePopoverContent',
                    xtype: 'component',
                    html: this._buildContent(this.config.percentDoneData),
                    listeners: {
                        afterrender: function() {
                            if (!this._hasReleaseData(this.config.percentDoneData)){
                                this._retrievePortfolioItemType();
                            } else {
                                this._setTitle();
                                this._attachActions();
                                if (Rally.BrowserTest) {
                                    Rally.BrowserTest.publishComponentReady(this);
                                }
                            }
                        },
                        scope: this
                    }
                };

                this.callParent(arguments);
            }
        }
});

Ext.define('CArABU.technicalservices.StoryRollupCustomListSettings',{
    singleton: true,

    storyStartDateField: undefined,
    storyEndDateField: undefined
});

Ext.define('CArABU.technicalservices.TeamPopover', {
    alias: 'widget.teampopover',
    extend: 'Rally.ui.popover.Popover',

    mixins: [
        'Rally.Messageable'
    ],

    cls: 'blocked-reason-popover',
    width: 400,

    offsetFromTarget:[{x:0, y:-10}, {x:15, y:0}, {x:0, y:10}, {x:0, y:0}],
    header: false,
    closable: true,

    config: {
        record: null
    },

    constructor: function(config) {
        Ext.apply(this.config, config);

        this.callParent(arguments);

        var teams = [];
        var values = config.record && config.record.getData();
        if (values && values.Teams && Ext.isArray(values.Teams)){
            var hash = {};
            Ext.Array.each(values.Teams, function(t){
                if (!hash[t]){
                    hash[t] = 0;
                }
                hash[t]++;
            });

            Ext.Object.each(hash, function(team, num){
                teams.push({team: team, leafStories: num});
            });

            var data = {
                teams: teams,
                formattedID: values.FormattedID,
                name: values.Name
            };
            var tpl = Ext.create('Ext.XTemplate',
                '<div class="story-title">{formattedID}: {name}</div><br/>',
                '<table><thead><th class="teams">Teams</th><th class="leafStories"># Leaf Stories</th></thead>',
                '<tpl for="teams">',
                '<tr><td class="teams">{team}</td><td class="leafStories">{leafStories}</td></tr>',
                '</tpl></table>'
            );


            this.add({
                xtype: 'container',
                html: tpl.apply(data)
            });
        }




    }
});

Ext.define('CArABU.technicalservices.TeamsTemplateColumn', {
    extend: 'Ext.grid.column.Template',
    alias: ['widget.teamstemplatecolumn'],

    align: 'right',

    initComponent: function(){
        var me = this;

        me.tpl = new Ext.XTemplate('<tpl><div class="team-cell">{[this.getTeamsText(values)]}</div></tpl>',{
            getTeamsText: function(values){
                if (values && values.Teams){
                    if (Ext.isArray(values.Teams)){
                        var teams = Ext.Array.unique(values.Teams);
                        return teams.length;
                    }
                }
                return '--';
            }

        });
        me.hasCustomRenderer = true;
        me.callParent(arguments);
    },
    defaultRenderer: function(value, meta, record) {
        var data = Ext.apply({}, record.getData()); //, record.getAssociatedData());
        return this.tpl.apply(data);
    }
});

Ext.define("story-rollup-custom-list", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'selector_box'},
        {xtype:'container',itemId:'grid_box'}
    ],

    integrationHeaders : {
        name : "story-rollup-custom-list"
    },

    config: {
        defaultSettings: {
            queryFilter: "",
            featureQueryFilter: "",
            tfsLinkField: "c_TFSLink",
            storyStartDateField: "c_TeamFeatureStartDate",
            storyEndDateField: "c_TeamFeatureEndDate"
        }
    },

    acceptedScheduleStates: ['Accepted'],
    portfolioItemTypes: [],

    launch: function() {
        CArABU.technicalservices.StoryRollupCustomListSettings.storyStartDateField = this.getStartDateField();
        CArABU.technicalservices.StoryRollupCustomListSettings.storyEndDateField = this.getEndDateField();

        this.initializeCompletedScheduleStates("Accepted").then({
            success: this.initializeApp,
            failure: this.showErrorNotification,
            scope: this
        });

    },
    initializeCompletedScheduleStates: function(firstCompletedState){
        var deferred = Ext.create('Deft.Deferred');

        Rally.data.ModelFactory.getModel({
            type: 'UserStory',
            success: function(model) {
                model.getField('ScheduleState').getAllowedValueStore().load({
                    callback: function(records, operation, success) {
                        if (success){
                            var scheduleStates = [];
                            Ext.Array.each(records, function(allowedValue) {
                                //each record is an instance of the AllowedAttributeValue model
                                scheduleStates.push(allowedValue.get('StringValue'));
                            });
                            var completedIndex = _.indexOf(scheduleStates,firstCompletedState);
                            deferred.resolve(Ext.Array.slice(scheduleStates,completedIndex))
                        } else {
                            var msg = "Error fetching Schedule State values:  " + operation && operation.error && operation.error.errors.join(",");
                            deferred.reject(msg);
                        }

                    }
                });
            }
        });

        return deferred;
    },
    initializeApp: function(completedScheduleStates){
        this.acceptedScheduleStates = completedScheduleStates;
        this.logger.log('initializeApp', completedScheduleStates);

        this.getSelectorBox().removeAll();

        var cb = this.getSelectorBox().add({
            xtype: 'rallyportfolioitemtypecombobox',
            fieldLabel: "Type"
        });
        cb.on('ready', this.updatePortfolioItemTypes, this);

    },
    updatePortfolioItemTypes: function(cb){
        this.logger.log('updatePortfolioItemTypes', cb.getStore().getRange());
        this.portfolioItemTypes = Ext.Array.map(cb.getStore().getRange(), function(p){ return p.get('TypePath'); });
        cb.on('select', this.updateView, this);
        if (cb.getValue()){
            this.updateView(cb);
        }

    },
    getSelectorBox: function(){
        return this.down('#selector_box');
    },
    getGridBox: function() {
        return this.down('#grid_box');
    },
    getTFSTeamPrefix: function(){
        return "TFS: ";
    },
    getEndDateField: function(){
        return this.getSetting('storyEndDateField');
    },
    getStartDateField: function(){
        return this.getSetting('storyStartDateField');
    },
    getInitialFilters: function(){
        var query = this.getSetting('queryFilter'),
            featureFilters = null;

        this.logger.log('getInitialFilters', this.modelNames, this.portfolioItemTypes);

        if (this.isLowestLevel()){
            //This is the lowest level portfolio item type
            featureFilters = this.getFeatureFilters();
        }

        if (query && query.length > 0){
            var filters = Rally.data.wsapi.Filter.fromQueryString(query);
            if (featureFilters){
                filters = filters.and(featureFilters);
            }
            return filters;
        }
        return featureFilters || [];
    },
    getFeatureFilters: function(){
        var query = this.getSetting('featureQueryFilter');
        this.logger.log('getFeatureFilters', query, query.length);
        if (query && query.length > 0){
            var filters = Rally.data.wsapi.Filter.fromQueryString(query);
            this.logger.log('getFeatureFilters', filters.toString());
            return filters;
        }
        return null;
    },
    getTFSLinkField: function(){
        return this.getSetting('tfsLinkField');
    },
    isLowestLevel: function(){
        var idx = _.indexOf(this.portfolioItemTypes, this.modelNames && this.modelNames[0]);
        this.logger.log('isLowestLevel', idx, this.modelNames, this.portfolioItemTypes);
        return  (idx === this.portfolioItemTypes.length - 1)
    },
    getSecondLevelPortfolioItem: function(){
        return this.portfolioItemTypes.slice(-2)[0];
    },
    updateView: function(piSelector){
        var piType = piSelector.getRecord() && piSelector.getRecord().get('TypePath');
        this.logger.log('updateView', piType);

        this.childHash = {};
        this.summaryInfo = {};
        this.getGridBox().removeAll();

        if (!piType){
            return;
        }

        var childFilterHash = null;
        if (!this.isLowestLevel() && this.getFeatureFilters()){
            childFilterHash = {};
            childFilterHash[this.getSecondLevelPortfolioItem().toLowerCase()] = this.getFeatureFilters();
        }

        this.modelNames = [piType];
        var fetch = [this.getFeatureName(),'ScheduleState','PlanEstimate'];
        if (this.getTFSLinkField()){ fetch.push(this.getTFSLinkField());}
        if (this.getStartDateField()){ fetch.push(this.getStartDateField());}
        if (this.getEndDateField()){ fetch.push(this.getEndDateField());}

        this.logger.log('updateView', childFilterHash, this.isLowestLevel(), this.getFeatureFilters());
        Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
            models: this.modelNames,
            fetch: fetch,
            enableHierarchy: true,
            childFilters: childFilterHash,
            filters: this.getInitialFilters()
        }).then({
            success: this.buildGridBoard,
            scope: this
        });

    },
    getFeatureName: function(){
        return 'Feature';
    },
    updateAssociatedData: function(store, node, records, success){
        this.logger.log('updateAssociatedData', store, node, records, success);
        var updateableRecords = [],
            featureOids = [],
            featureName = this.getFeatureName(),
            subLevelRecords = [];

        Ext.Array.each(records, function(r){
            if (r.get('PortfolioItem')){
                updateableRecords.push(r);
                if (!Ext.Array.contains(featureOids,r.get('PortfolioItem').ObjectID )){
                    featureOids.push(r.get('PortfolioItem').ObjectID);
                }
            } else if (r.get(featureName)){
                subLevelRecords.push(r);
            }
        });
        this.logger.log('updateAssociatedData', subLevelRecords, updateableRecords, featureOids);

        if (updateableRecords.length > 0){
            Ext.create('CArABU.technicalservices.chunk.Store',{
                storeConfig: {
                    model: 'HierarchicalRequirement',
                    context: { project: null },
                    fetch: ['PlanEstimate','ScheduleState','PortfolioItem','Parent','ObjectID','Project','Name',this.getTFSLinkField()],
                },
                chunkProperty: featureName + '.ObjectID',
                chunkValue: featureOids
            }).load().then({
                success: function(children){
                    this.processChildren(updateableRecords, children);
                },
                failure: this.showErrorNotification,
                scope: this
            });
        }

        if (subLevelRecords.length > 0){
           this.updateAdditionalFields(subLevelRecords);
        }

    },
    updateAdditionalFields: function(records){
        this.logger.log('updateAdditionalFields',records, this.summaryInfo);
       // this.down('rallygridboard').getGridOrBoard().getStore().suspendEvents();

        Ext.suspendLayouts();
        for (var i=0; i< records.length; i++){
              var r = records[i],
                  parent = r.get('Parent') && r.get('Parent').ObjectID,
                    totals = this.summaryInfo[r.get('ObjectID')] || {};

            if (parent){
                totals.startDate = this.summaryInfo[parent].startDate;
                totals.endDate = this.summaryInfo[parent].endDate;
            }

            var percentDoneByStoryCount = totals.totalCount > 0 ? totals.totalAcceptedCount/totals.totalCount : 0,
                percentDoneByPlanEstimate = totals.totalPlanEstimate > 0 ? totals.totalAcceptedPlanEstimate/totals.totalPlanEstimate : 0;

            r.set('PercentDoneByStoryCount',percentDoneByStoryCount);
            r.set('PercentDoneByStoryPlanEstimate',percentDoneByPlanEstimate);
            r.set('Teams', totals.projects);
            r.set('_summary', totals);
        }
        Ext.resumeLayouts(true);
       // this.down('rallygridboard').getGridOrBoard().getStore().resumeEvents();
    },
    processChildren: function(topLevelStoryRecords, childRecords){
        this.logger.log('processChildren', childRecords)

        if (!childRecords || childRecords.length == 0){
            this.updateAdditionalFields(topLevelStoryRecords);
            return;
        }

        var childHash = {};

        for (var i=0; i<childRecords.length; i++){
            var child = childRecords[i].getData(),
                parent = (child.PortfolioItem && child.PortfolioItem.ObjectID) ||
                            (child.Parent && child.Parent.ObjectID) || null;

            if (parent){
                if (!childHash[parent]){
                    childHash[parent] = [];
                }
                childHash[parent].push(child);
            }
        }

        this.logger.log('processChildren', childHash, topLevelStoryRecords);
        var startDateField = this.getStartDateField(),
            endDateField = this.getEndDateField();

        for (var i=0; i< topLevelStoryRecords.length; i++) {
            var r = topLevelStoryRecords[i],
                oid = r.get('ObjectID'),
                startDate = r.get(startDateField),
                endDate = r.get(endDateField);

            this.summaryInfo[oid] = this.getChildTotals(r, childHash);
            this.summaryInfo[oid].startDate = startDate;
            this.summaryInfo[oid].endDate = endDate;

        }
        this.updateAdditionalFields(topLevelStoryRecords);

    },
    getChildTotals: function(record, childHash){
        this.logger.log('getChildTotals', record, childHash);
        var oid = record.ObjectID || record.get('ObjectID');
        var acceptedScheduleStates = this.acceptedScheduleStates;
        var children = childHash[oid] || [],
            totalPlanEstimate = 0,
            totalAcceptedPlanEstimate = 0,
            totalCount = 0,
            totalAcceptedCount = 0,
            projects = [],
            tfsLinkField = this.getTFSLinkField(),
            tfsPrefix = this.getTFSTeamPrefix(),
            unestimatedLeafStories = 0;

        if (children.length > 0) {
            Ext.Array.each(children, function (c) {
                var totals = {};
                if (!c.ObjectID){
                    c = c.getData();
                }

                if (childHash[c.ObjectID]) {
                    totals = this.getChildTotals(c, childHash, acceptedScheduleStates);
                    this.summaryInfo[c.ObjectID] = totals;
                } else {
                    var isAccepted = Ext.Array.contains(acceptedScheduleStates, c.ScheduleState),
                        acceptedPlanEstimate = isAccepted && c.PlanEstimate || 0,
                        acceptedTotal = isAccepted && 1 || 0,
                        isTFS = c[tfsLinkField],
                        projectName = c.Project && c.Project.Name,
                        unestimated = !c.PlanEstimate && (c.PlanEstimate !== 0);

                    if (isTFS){
                        projectName = tfsPrefix + projectName;
                    }

                    totals = {
                        unestimatedLeafStories: unestimated && 1 || 0,
                        totalPlanEstimate: c.PlanEstimate || 0,
                        totalAcceptedPlanEstimate: acceptedPlanEstimate,
                        totalCount: 1,
                        totalAcceptedCount: acceptedTotal,
                        projects: [projectName]
                    };
                    this.summaryInfo[c.ObjectID] = totals;
                }
                unestimatedLeafStories += totals.unestimatedLeafStories;
                totalPlanEstimate += totals.totalPlanEstimate;
                totalAcceptedPlanEstimate += totals.totalAcceptedPlanEstimate;
                totalCount += totals.totalCount;
                totalAcceptedCount += totals.totalAcceptedCount;
                projects = projects.concat(totals.projects);

            }, this);
        } else {
            var recordData = record.ObjectID ? record : record.getData(),
                isAccepted = Ext.Array.contains(acceptedScheduleStates, recordData.ScheduleState),
                acceptedPlanEstimate = isAccepted && recordData.PlanEstimate || 0,
                acceptedTotal = isAccepted && 1 || 0,
                unestimatedCount = (!recordData.PlanEstimate && (recordData.PlanEstimate !== 0) && 1) || 0;

            unestimatedLeafStories = unestimatedCount;
            totalPlanEstimate = recordData.PlanEstimate || 0;
            totalAcceptedPlanEstimate = acceptedPlanEstimate;
            totalCount = 1;
            totalAcceptedCount = acceptedTotal;
            projects = [recordData.Project && recordData.Project.Name]

            this.summaryInfo[recordData.ObjectID] = {
                unestimatedLeafStories: unestimatedCount,
                totalPlanEstimate: recordData.PlanEstimate || 0,
                totalAcceptedPlanEstimate: acceptedPlanEstimate,
                totalCount: 1,
                totalAcceptedCount: acceptedTotal,
                projects: [recordData.Project && recordData.Project.Name]
            }
        }


        return {
            totalPlanEstimate: totalPlanEstimate,
            totalAcceptedPlanEstimate: totalAcceptedPlanEstimate,
            totalCount: totalCount,
            totalAcceptedCount: totalAcceptedCount,
            projects: projects,
            unestimatedLeafStories: unestimatedLeafStories
        };
    },
    showErrorNotification: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg});
    },
    buildGridBoard: function(store){
        var modelNames = this.modelNames,
            context = this.getContext();

        this.getGridBox().removeAll();
        store.on('load', this.updateAssociatedData, this);
        this.getGridBox().add({
            xtype: 'rallygridboard',
            context: context,
            modelNames: modelNames,
            toggleState: 'grid',
            stateful: false,
            stateId: 'fred2',
            plugins: [
                'rallygridboardaddnew',
                {
                    ptype: 'rallygridboardfieldpicker',
                    headerPosition: 'left',
                    modelNames: modelNames,
                    stateful: true,
                    stateId: context.getScopedStateId('columns4')
                },{
                    ptype: 'rallygridboardinlinefiltercontrol',
                    inlineFilterButtonConfig: {
                        stateful: true,
                        stateId: context.getScopedStateId('filters'),
                        modelNames: modelNames,
                        inlineFilterPanelConfig: {
                            quickFilterPanelConfig: {
                                defaultFields: [
                                    'ArtifactSearch',
                                    'Owner',
                                    'ModelType'
                                ]
                            }
                        }
                    }
                }, {
                    ptype: 'rallygridboardactionsmenu',
                    menuItems: [
                        {
                            text: 'Export...',
                            handler: function() {
                                window.location = Rally.ui.gridboard.Export.buildCsvExportUrl(
                                    this.down('rallygridboard').getGridOrBoard());
                            },
                            scope: this
                        }
                    ],
                    buttonConfig: {
                        iconCls: 'icon-export'
                    }
                }
            ],
            gridConfig: {
                store: store,
                storeConfig: {
                    filters: this.getInitialFilters()
                },
                columnCfgs: this.getDefaultColumns(),
                derivedColumns: this.getAdditionalColumns(),
                listeners: {
                    cellclick: this.showTeamPopover,
                    scope: this
                }
            },
            height: this.getHeight()
        });
    },
    showTeamPopover: function(grid, td, cellIndex, record, tr, rowIndex, event){

        if (!record.get('Teams')){
            return;
        }

        var targetEl = Ext.get(event.getTarget());
        if (!targetEl || !targetEl.hasCls('team-cell')){
            return;
        }

        this.logger.log('showTeamPopover', grid, td, cellIndex, record, tr, rowIndex, targetEl, targetEl.hasCls('team-cell'));

        Ext.create('CArABU.technicalservices.TeamPopover', {
            target: targetEl,
            targetSelector: targetEl.id,
            record: record
        });
    },
    getDefaultColumns: function(){
        var cols = [
            'Name',
            'PercentDoneByStoryPlanEstimate',
            'PercentDoneByStoryCount',
            'State',
            'Owner'
        ].concat(this.getAdditionalColumns());
        this.logger.log('getDefaultColumns', cols);
        return cols;
    },
    getAdditionalColumns: function(){
        return [{
            xtype: 'teamstemplatecolumn',
            text: 'Teams',
            cls: 'teams-cell'
        }];
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    },
    getSettingsFields: function(){
        return [{
            xtype: 'container',
            padding: 25,
            html: '<div class="settings-message">The settings below affect the behavior of the report.  The <b>TFS Link field</b> is the field that the report checks to determine if the story is linked to a TFS story.  The <b>Story Start Date</b> and <b>Story End Date</b> fields determine the coloring of the progress bar for the story rollups.  Changing these fields will affect the behavior of the app.</div>'
        },{
            xtype: 'rallyfieldcombobox',
            model: 'hierarchicalrequirement',
            name: 'tfsLinkField',
            fieldLabel: "TFS Link Field",
            labelAlign: 'right',
            labelWidth: 100,
            _isNotHidden: function(field){

                if (!field.readOnly && field.attributeDefinition && (field.attributeDefinition.AttributeType === 'STRING' ||
                        field.attributeDefinition.AttributeType === 'TEXT')){
                    return true;
                }
                return false;
            }
        },{
            xtype: 'rallyfieldcombobox',
            model: 'hierarchicalrequirement',
            name: 'storyStartDateField',
            fieldLabel: 'Story StartDate Field',
            labelAlign: 'right',
            labelWidth: 100,
            _isNotHidden: function(field){
                return (!field.readOnly && field.attributeDefinition && field.attributeDefinition.AttributeType === 'DATE');
            }

        },{
            xtype: 'rallyfieldcombobox',
            model: 'hierarchicalrequirement',
            name: 'storyEndDateField',
            fieldLabel: 'Story EndDate Field',
            labelAlign: 'right',
            labelWidth: 100,
            _isNotHidden: function(field){
                return (!field.readOnly && field.attributeDefinition && field.attributeDefinition.AttributeType === 'DATE');
            }

        },{
            xtype: 'textarea',
            fieldLabel: 'Top Level Query Filter',
            name: 'queryFilter',
            anchor: '100%',
            cls: 'query-field',
            margin: '0 70 0 0',
            labelAlign: 'right',
            labelWidth: 100,
            plugins: [
                {
                    ptype: 'rallyhelpfield',
                    helpId: 194
                },
                'rallyfieldvalidationui'
            ],
            validateOnBlur: false,
            validateOnChange: false,
            validator: function(value) {
                try {
                    if (value) {
                        Rally.data.wsapi.Filter.fromQueryString(value);
                    }
                    return true;
                } catch (e) {
                    return e.message;
                }
            }
        },{
            xtype: 'textarea',
            fieldLabel: 'Program Feature Query Filter',
            name: 'featureQueryFilter',
            anchor: '100%',
            cls: 'query-field',
            margin: '0 70 0 0',
            labelAlign: 'right',
            labelWidth: 100,
            plugins: [
                {
                    ptype: 'rallyhelpfield',
                    helpId: 194
                },
                'rallyfieldvalidationui'
            ],
            validateOnBlur: false,
            validateOnChange: false,
            validator: function(value) {
                try {
                    if (value) {
                        Rally.data.wsapi.Filter.fromQueryString(value);
                    }
                    return true;
                } catch (e) {
                    return e.message;
                }
            }
        }];
    }
});

            
               Rally.launchApp('story-rollup-custom-list', {
                   name: 'Story Rollup Custom List'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.settings-message {
    color: grey;
    font-family:NotoSans;
    font-style: italic;
    font-size: 10pt;
}

table .teams {
    text-align: left;
    flex: 1;
}
table th.teams{
    font-size: 12px;
    color: #A9A9A9;
    font-weight: bolder;
}
table .leafStories {
    text-align: center;
}
table th.leafStories {
    font-size: 12px;
    color: #A9A9A9;
    font-weight: bolder;
}

.story-title {
    font-size: 12px;
    color: #F6A900;
    font-weight: bolder;
}

.team-cell {
    cursor:pointer;
    text-align:right;
}
    </style>

</head>
<body></body>
</html>